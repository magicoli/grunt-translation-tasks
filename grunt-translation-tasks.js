const fs   = require( 'fs' );
const path = require( 'path' );

module.exports = function(grunt, pluginName) {

    'use strict';

    // Determine project type and settings
    const isWordPressProject = !!pluginName;
    const pkg = grunt.file.readJSON('package.json');
    const projectName = pluginName || path.basename(pkg.name || 'project');
    
    // Set locale paths based on project type
    const localeFolder = isWordPressProject ? 'languages' : 'locale';
    const localePoFiles = isWordPressProject ? 'languages/*.po' : 'locale/*/LC_MESSAGES/*.po';
    const potPath = isWordPressProject ? 'languages' : 'locale';

    // Helper function to update PO-Revision-Date in PO files
    function updatePoRevisionDate(poFile) {
        if (!grunt.file.exists(poFile)) {
            return false;
        }
        
        var content = grunt.file.read(poFile);
        var now = new Date();
        var timestamp = now.getFullYear() + '-' + 
                       String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                       String(now.getDate()).padStart(2, '0') + ' ' +
                       String(now.getHours()).padStart(2, '0') + ':' + 
                       String(now.getMinutes()).padStart(2, '0') + '+0000';
        
        // Update PO-Revision-Date header
        content = content.replace(
            /"PO-Revision-Date: [^"]*"/,
            '"PO-Revision-Date: ' + timestamp + '\\n"'
        );
        
        grunt.file.write(poFile, content);
        return true;
    }

    // Helper function to get git user info synchronously
    function getGitUserInfo() {
        try {
            var spawn = require('child_process').spawnSync;
            
            var nameResult = spawn('git', ['config', 'user.name'], { encoding: 'utf8' });
            var emailResult = spawn('git', ['config', 'user.email'], { encoding: 'utf8' });
            
            var name = nameResult.stdout ? nameResult.stdout.trim() : '';
            var email = emailResult.stdout ? emailResult.stdout.trim() : '';
            
            if (name && email) {
                return name + ' <' + email + '>';
            } else if (name) {
                return name;
            } else if (email) {
                return email;
            }
        } catch (error) {
            // Silently fail if git is not available
            grunt.log.debug('Error while getting git user info: ' + error);
            return false;
        }
        return null;
    }

    // Helper function to update PO headers
    function updatePoHeaders(poFile, potFile, updateLastTranslator) {
        if (!grunt.file.exists(poFile)) {
            return false;
        }
        
        var content = grunt.file.read(poFile);
        var now = new Date();
        var timestamp = now.getFullYear() + '-' + 
                       String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                       String(now.getDate()).padStart(2, '0') + ' ' +
                       String(now.getHours()).padStart(2, '0') + ':' + 
                       String(now.getMinutes()).padStart(2, '0') + '+0000';
        
        // Update PO-Revision-Date header
        content = content.replace(
            /"PO-Revision-Date: [^"]*"/,
            '"PO-Revision-Date: ' + timestamp + '\\n"'
        );
        
        // Update POT-Creation-Date from POT file if available
        if (potFile && grunt.file.exists(potFile)) {
            var potContent = grunt.file.read(potFile);
            var potCreationMatch = potContent.match(/"POT-Creation-Date: ([^"]*)"/);
            if (potCreationMatch) {
                content = content.replace(
                    /"POT-Creation-Date: [^"]*"/,
                    '"POT-Creation-Date: ' + potCreationMatch[1] + '"'
                );
            }
        }
        
        // Update Last-Translator if requested and git info is available
        if (updateLastTranslator) {
            var gitUser = getGitUserInfo();
            var translator = gitUser || 'Generated by grunt-translation-tasks.js';
            content = content.replace(
                /"Last-Translator: [^"]*"/,
                '"Last-Translator: ' + translator + '\\n"'
            );
        }
        
        grunt.file.write(poFile, content);
        return true;
    }

    // Helper function to generate JSON from PO files for JavaScript usage
    function generateJsonFromPo(poFile, jsonFile) {
        if (!grunt.file.exists(poFile)) {
            throw new Error('PO file not found: ' + poFile);
        }

        var poContent = grunt.file.read(poFile);
        var translations = {};
        
        // Parse PO file content
        var lines = poContent.split('\n');
        var currentEntry = null;
        var inMsgid = false;
        var inMsgstr = false;
        var inMsgstrPlural = false;
        var pluralIndex = 0;
        
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            
            // Skip empty lines and comments (except for context comments)
            if (!line || line.startsWith('#')) {
                // Check for context comments
                if (line.startsWith('#: ') || line.startsWith('#, ')) {
                    continue;
                }
                if (line.startsWith('#msgctxt ') || line.startsWith('msgctxt ')) {
                    // Handle context - we'll append it to the msgid
                    var contextMatch = line.match(/msgctxt\s+"([^"]+)"/);
                    if (contextMatch && currentEntry) {
                        currentEntry.context = contextMatch[1];
                    }
                    continue;
                }
                // Reset entry on empty line
                if (!line && currentEntry && currentEntry.msgid && currentEntry.msgstr) {
                    // Store the completed entry
                    var key = currentEntry.msgid;
                    if (currentEntry.context) {
                        key += '_' + currentEntry.context;
                    }
                    if (currentEntry.plurals && currentEntry.plurals.length > 0) {
                        // For plural forms, store the first plural form
                        translations[key] = currentEntry.plurals[0] || '';
                        // Also store the plural key
                        translations[key + '_plural'] = currentEntry.plurals[1] || '';
                    } else {
                        translations[key] = currentEntry.msgstr || '';
                    }
                    currentEntry = null;
                }
                continue;
            }
            
            // Parse msgid
            if (line.startsWith('msgid ')) {
                currentEntry = { msgid: '', msgstr: '', plurals: [] };
                inMsgid = true;
                inMsgstr = false;
                inMsgstrPlural = false;
                var msgidMatch = line.match(/msgid\s+"([^"]*)"/);
                if (msgidMatch) {
                    currentEntry.msgid = msgidMatch[1];
                }
                continue;
            }
            
            // Parse msgid_plural
            if (line.startsWith('msgid_plural ')) {
                inMsgid = false;
                var msgidPluralMatch = line.match(/msgid_plural\s+"([^"]*)"/);
                if (msgidPluralMatch) {
                    currentEntry.msgid_plural = msgidPluralMatch[1];
                }
                continue;
            }
            
            // Parse msgstr
            if (line.startsWith('msgstr ')) {
                inMsgid = false;
                inMsgstr = true;
                inMsgstrPlural = false;
                var msgstrMatch = line.match(/msgstr\s+"([^"]*)"/);
                if (msgstrMatch) {
                    currentEntry.msgstr = msgstrMatch[1];
                }
                continue;
            }
            
            // Parse msgstr[n]
            if (line.match(/msgstr\[\d+\]/)) {
                inMsgid = false;
                inMsgstr = false;
                inMsgstrPlural = true;
                var pluralMatch = line.match(/msgstr\[(\d+)\]\s+"([^"]*)"/);
                if (pluralMatch) {
                    pluralIndex = parseInt(pluralMatch[1]);
                    currentEntry.plurals[pluralIndex] = pluralMatch[2];
                }
                continue;
            }
            
            // Handle continuation lines (quoted strings)
            if (line.startsWith('"') && line.endsWith('"')) {
                var continuationText = line.slice(1, -1);
                if (inMsgid) {
                    currentEntry.msgid += continuationText;
                } else if (inMsgstr) {
                    currentEntry.msgstr += continuationText;
                } else if (inMsgstrPlural) {
                    currentEntry.plurals[pluralIndex] = (currentEntry.plurals[pluralIndex] || '') + continuationText;
                }
                continue;
            }
        }
        
        // Handle the last entry if file doesn't end with empty line
        if (currentEntry && currentEntry.msgid && currentEntry.msgstr) {
            var key = currentEntry.msgid;
            if (currentEntry.context) {
                key += '_' + currentEntry.context;
            }
            if (currentEntry.plurals && currentEntry.plurals.length > 0) {
                translations[key] = currentEntry.plurals[0] || '';
                translations[key + '_plural'] = currentEntry.plurals[1] || '';
            } else {
                translations[key] = currentEntry.msgstr || '';
            }
        }
        
        // Write JSON file
        grunt.file.write(jsonFile, JSON.stringify(translations, null, 4));
        return true;
    }

    grunt.config.set('addtextdomain', {
        options: {
            textdomain: projectName,
        },
        update_all_domains: {
            options: {
                updateDomains: true
            },
            src: [ '*.php', '**/*.php', '!\.git/**/*', '!bin/**/*', '!node_modules/**/*', '!tests/**/*' ]
        }
    });

    // Custom Task: Make MO Files
    grunt.config.set('makemo', {
        target: {
            files: [{
                expand: true,
                cwd: localeFolder,
                src: isWordPressProject ? ['*.po'] : ['*/LC_MESSAGES/*.po'],
            }]
        }
    });

    grunt.config.set('makepot', {
        target: {
            options: {
                domainPath: '/' + localeFolder,
                exclude: [
                    '\.git/*',
                    'bin/*',
                    'node_modules/*',
                    'vendor/*',
                    '*/vendor/*',
                    '**/vendor/*',
                    '**/tmp/*',
                    '**/cache/*',
                    '**/data/*',
                    'cache/*',
                    'data/*',
                    'tests/*',
                    '**/tests/*',
                    'tmp/*',
                    'dev/*',
                ],
                mainFile: isWordPressProject ? `${pluginName}.php` : null,
                potFilename: `${projectName}.pot`,
                potHeaders: {
                    poedit: true,
                    'x-poedit-keywordslist': true
                },
                type: isWordPressProject ? 'wp-plugin' : 'generic',
                updateTimestamp: true
            }
        }
    });

    // Only load WP-specific plugins for WordPress projects
    if (isWordPressProject) {
        grunt.loadNpmTasks('grunt-wp-i18n');
    }

    // Register custom tasks
    if (isWordPressProject) {
        grunt.registerTask('i18n', [ 'addtextdomain', 'makepot', 'msgmerge', 'makemo' ]);
        // Register WordPress-specific tasks
        grunt.registerTask('makepot', ['makepot:target']);
        grunt.registerTask('makemo', ['makemo:target']);
    } else {
        grunt.registerTask('i18n', [ 'xgettext', 'msgmerge', 'msgfmt' ]);
        // Register non-WordPress equivalents
        grunt.registerTask('makepot', ['xgettext']);
        grunt.registerTask('makemo', ['msgfmt']);
    }

    grunt.registerTask('xgettext', 'Extract strings using xgettext for non-WordPress projects', function() {
        var done = this.async();
        var potFile = potPath + '/' + projectName + '.pot';
        
        // Use git ls-files for much faster file discovery
        grunt.util.spawn({
            cmd: 'git',
            args: ['ls-files', '*.php', '*.js']
        }, function(error, result, code) {
            if (error) {
                grunt.log.error('Error running git ls-files: ' + error);
                grunt.log.error('This task requires a git repository. Make sure you are in a git repository and git is available.');
                return done(false);
            }
            
            // Parse git output and filter files
            var gitFiles = result.stdout.trim().split('\n').filter(function(file) {
                return file && 
                       !file.match(/^(node_modules|vendor|tests|dev|data|cache|tmp)\//) &&
                       !file.match(/\/(vendor|tmp|data|cache)\//) &&
                       (file.endsWith('.php') || file.endsWith('.js'));
            });
            
            var phpFiles = gitFiles.filter(function(file) { return file.endsWith('.php'); });
            var jsFiles = gitFiles.filter(function(file) { return file.endsWith('.js'); });
            
            grunt.log.writeln('Found ' + phpFiles.length + ' PHP files and ' + jsFiles.length + ' JS files via git ls-files');

            // DEBUG show files to about to be processed and die
            grunt.log.writeln('Files to be processed:');
            gitFiles.forEach(function(file) {
                grunt.log.writeln(' - ' + file);
            });
            
            if (!gitFiles.length) {
                grunt.log.error('No PHP or JS files found for extraction');
                return done(false);
            }
            
            grunt.util.spawn({
                cmd: 'xgettext',
                args: [
                    '--keyword=_',
                    '--keyword=__',
                    '--keyword=_e',
                    '--keyword=_c:1,2c',
                    '--keyword=_x:1,2c',
                    '--keyword=_ex:1,2c',
                    '--keyword=_n:1,2',
                    '--keyword=_nx:1,2,4c',
                    '--keyword=_n_noop:1,2',
                    '--keyword=_nx_noop:1,2,3c',
                    '--keyword=_f',
                    '--keyword=_fe',
                    '--keyword=_p:1,2',
                    '--keyword=_pf:1,2',
                    '--keyword=_pfe:1,2',
                    '--keyword=_m',
                    '--keyword=esc_attr__',
                    '--keyword=esc_html__',
                    '--keyword=esc_attr_e',
                    '--keyword=esc_html_e',
                    '--keyword=esc_attr_x:1,2c',
                    '--keyword=esc_html_x:1,2c',
                    '--from-code=UTF-8',
                    '--add-comments=translators',
                    '--output=' + potFile
                ].concat(gitFiles)
            }, function(error, result, code) {
                if (error) {
                    grunt.log.error('Error running xgettext: ' + error);
                    return done(false);
                }
                grunt.log.writeln('Generated POT file: ' + potFile);
                grunt.log.writeln('Extracted strings from ' + phpFiles.length + ' PHP files and ' + jsFiles.length + ' JS files');
                done();
            });
        });
    });

    grunt.registerTask('msgmerge', 'Update PO files with new POT content', function() {
        var done = this.async();
        var poFiles = grunt.file.expand(localePoFiles);
        var potFile = potPath + '/' + projectName + '.pot';

        if (!grunt.file.exists(potFile)) {
            grunt.log.error('POT file not found: ' + potFile);
            return done(false);
        }

        if (!poFiles.length) {
            grunt.log.writeln('No PO files found - skipping msgmerge');
            return done();
        }

        var completed = 0;
        var hasErrors = false;

        poFiles.forEach(function(poFile) {
            grunt.util.spawn({
                cmd: 'msgmerge',
                args: ['--update', '--backup=off', poFile, potFile]
            }, function(error, result, code) {
                if (error) {
                    grunt.log.error('Error merging ' + poFile + ': ' + error);
                    hasErrors = true;
                } else {
                    // Update headers after successful merge
                    updatePoHeaders(poFile, potFile, true);
                    grunt.log.writeln('Updated ' + poFile + ' with new strings from POT');
                }
                completed++;
                if (completed === poFiles.length) {
                    done(!hasErrors);
                }
            });
        });
    });

    grunt.registerTask('msgfmt', 'Convert PO files to MO using msgfmt for non-WordPress projects', function() {
        var done = this.async();
        var poFiles = grunt.file.expand(localePoFiles);

        if (!poFiles.length) {
            grunt.log.error('No PO files found');
            return done(false);
        }

        var completed = 0;
        var hasErrors = false;

        poFiles.forEach(function(poFile) {
            var moFile = poFile.replace(/\.po$/, '.mo');
            var jsonFile = poFile.replace(/\.po$/, '.json');
            
            // Update headers before conversion
            updatePoHeaders(poFile, null, true);
            
            grunt.util.spawn({
                cmd: 'msgfmt',
                args: ['-o', moFile, poFile]
            }, function(error, result, code) {
                if (error) {
                    grunt.log.error('Error processing ' + poFile + ': ' + error);
                    hasErrors = true;
                } else {
                    grunt.log.writeln('Converted ' + poFile + ' to ' + moFile);
                    
                    // Generate JSON file for JavaScript usage
                    try {
                        generateJsonFromPo(poFile, jsonFile);
                        grunt.log.writeln('Generated ' + jsonFile + ' for JavaScript usage');
                    } catch (jsonError) {
                        grunt.log.error('Error generating JSON from ' + poFile + ': ' + jsonError);
                        hasErrors = true;
                    }
                }
                completed++;
                if (completed === poFiles.length) {
                    done(!hasErrors);
                }
            });
        });
    });

    grunt.registerTask('makemo', 'Convert PO files to MO using WP CLI for WordPress projects', function() {
        var done = this.async();
        var poFiles = grunt.file.expand(localePoFiles);

        if (!poFiles.length) {
            grunt.log.error('No PO files found');
            return done(false);
        }

        var completed = 0;
        var hasErrors = false;

        poFiles.forEach(function(poFile) {
            var jsonFile = poFile.replace(/\.po$/, '.json');
            
            // Update headers before conversion
            updatePoHeaders(poFile, null, true);
            
            grunt.util.spawn({
                cmd: 'wp',
                args: ['i18n', 'make-mo', poFile]
            }, function(error, result, code) {
                if (error) {
                    grunt.log.error('Error processing ' + poFile + ': ' + error);
                    hasErrors = true;
                } else {
                    grunt.log.writeln('Converted ' + poFile);
                    
                    // Generate JSON file for JavaScript usage
                    try {
                        generateJsonFromPo(poFile, jsonFile);
                        grunt.log.writeln('Generated ' + jsonFile + ' for JavaScript usage');
                    } catch (jsonError) {
                        grunt.log.error('Error generating JSON from ' + poFile + ': ' + jsonError);
                        hasErrors = true;
                    }
                }
                completed++;
                if (completed === poFiles.length) {
                    done(!hasErrors);
                }
            });
        });
    });

    grunt.util.linefeed = '\n';

};
